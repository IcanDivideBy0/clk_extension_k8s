if k8s_context() == "":
    fail("No k8s server to play with. Hint: clk k8s flow")
clk_k8s = 'clk -a --force-color k8s -c ' + k8s_context() + ' '


def has_local_registry():
    return str(local(clk_k8s + 'features --field value --format plain local_registry', quiet=True)).strip() == "True"


def build_chart_update_command(
    location,
    dependencies=[],
    force=False,
    touched_file=None,
    remove=True,
):
    command = clk_k8s + 'helm dependency-update ' + location
    for dependency in dependencies:
        command += ' --package ' + dependency
    if force:
        command += ' --force '
    if touched_file:
        command += ' --touch="{}"'.format(touched_file)
    if remove:
        command += ' --remove'
    else:
        command += ' --no-remove'
    return command


def update_helm_chart(
    location,
    dependencies=[],
    force=False,
    touched_file=None,
    create_local_resource=False,
    remove=True,
):
    command = build_chart_update_command(
        location,
        dependencies,
        force=False,
        touched_file=None,
        remove=remove,
    )
    local(command)
    if create_local_resource:
        local_resource(
            'helm dependencies',
            command,
            trigger_mode=TRIGGER_MODE_MANUAL,
            auto_init=False,
            labels=["tooling"],
        )


def helm_dependency_update(path):
    local(clk_k8s + 'helm dependency-update ' + path)
